{"version":3,"sources":["../src/datasource.js"],"names":["_","c","OpMonDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","window","location","origin","name","q","headers","basicAuth","length","DEFAULT_HOST","DEFAULT_SERVICE","DEFAULT_METRIC","DEFAULT_TIMECUT","DEFAULT_RESULT_FORMAT","DEFAULT_OBJECT_TYPE","DEFAULT_EXTENDED_STATE","DEFAULT_HARD_STATE","DEFAULT_HOSTGROUP","DEFAULT_SERVICEGROUP","DEFAULT_SERVICECATALOG","options","query","buildQueryParameters","targets","filter","t","hide","host","service","hostgroup","servicegroup","metric","serviceCatalog","when","data","start","Number","range","from","toDate","getTime","toFixed","end","to","x","target","mode","MODE_SYSTEM","_fixup_regex","getAdhocFilters","adhocFilters","doRequest","method","result","k","res","alias","scopedVars","tag_host","value","tag_service","tag_metric","tag_label","replace","datapoints","y","pop","fill","undefined","factor","eval","NaN","push","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","then","matches","match","values","split","join","response","status","message","title","interpolated","mapToTextValue","prependVariables","This","mapper","objecttype","Error","requestOptions","_requestOptions","datasourceRequest","variables","unshift","text","map","d","i","isObject","withCredentials","MODE_CP","groupby","timecut","resultformat","extended_state","hardState","refId","Promise","resolve","reject","Authorization"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport * as c from './constants';\nexport class OpMonDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = window.location.origin +\n        '/opmon/seagull/www/index.php/wsconnector/action/datasource?' +\n        'mod=OPVIEW' +\n        '&' +\n        'shareduid=W1ksbu9/9O95NGvyrgbVYe6yEE2LcgQdivS5PHhiVe0=' +\n        '&' +\n        'q=';\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n    this.DEFAULT_HOST = \"- select host -\";\n    this.DEFAULT_SERVICE = \"- select service -\";\n    this.DEFAULT_METRIC = \"- all -\";\n    this.DEFAULT_TIMECUT = \"24x7\";\n    this.DEFAULT_RESULT_FORMAT = 'time_series';\n    this.DEFAULT_OBJECT_TYPE = 'Host';\n    this.DEFAULT_EXTENDED_STATE = false;\n    this.DEFAULT_HARD_STATE = true;\n    this.DEFAULT_HOSTGROUP = '- select hostgroup -';\n    this.DEFAULT_SERVICEGROUP = '- select servicegroup -';\n    this.DEFAULT_SERVICECATALOG = '- select service catalog -';\n  }\n\n  /* fetch pnp rrd data */\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t =>\n      !t.hide && t.host && t.service && t.hostgroup && t.servicegroup && t.metric && t.serviceCatalog\n    )\n\n    if(query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    query.start = Number(options.range.from.toDate().getTime() / 1000).toFixed();\n    query.end   = Number(options.range.to.toDate().getTime() / 1000).toFixed();\n\n    /* fixup regex syntax in query targets */\n    for(var x=0; x<query.targets.length; x++) {\n      var target = query.targets[x];\n      if(target.host      == this.DEFAULT_HOST || target.mode == c.MODE_SYSTEM)      { target.host      = '' }\n      if(target.service   == this.DEFAULT_SERVICE || target.mode == c.MODE_SYSTEM)   { target.service   = '' }\n      if(target.metric == this.DEFAULT_METRIC) { target.metric = '' }\n\n      target.host           = this._fixup_regex(target.host);\n      target.service        = this._fixup_regex(target.service);\n      target.metric         = this._fixup_regex(target.metric);\n      target.serviceCatalog = this._fixup_regex(target.serviceCatalog);\n\n\n      //target.host_id =  this.rawdata[target.refId]['host'].filter((cur) => (cur.text == target.host)).pop().value;\n      //target.service_id = this.rawdata[target.refId]['service'].filter((cur) => (cur.text == target.service)).pop().value;\n      //target.metric_id = this.rawdata[target.refId]['metric'].filter((cur) => (cur.text == target.metric)).pop().value;\n\n    }\n\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n\n\n    /*var This = this;\n    var requestOptions = this._requestOptions({\n      url: this.url + '/index.php/api/metrics',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n                          .then(function(result) {\n                            return(This.dataQueryMapper(result, options))\n                          });*/\n  }\n\n  /* maps the result data from pnp into grafana data format */\n  dataQueryMapper(result, options) {\n    var data = {data:[]};\n    if(!result || !result.data || !result.data.targets) {\n        return(data);\n    }\n    for(var x=0; x < result.data.targets.length; x++) {\n      for(var k=0; k < result.data.targets[x].length; k++) {\n        var target = options.targets[x];\n        var res    = result.data.targets[x][k];\n        var alias = target.metric;\n        if(target.alias) {\n          alias = target.alias;\n          var scopedVars = {\n            tag_host      : {value: res.host},\n            tag_service   : {value: res.service},\n            tag_metric : {value: res.metric},\n            tag_label     : {value: res.metric}\n          };\n          alias = this.templateSrv.replace(alias, scopedVars);\n        }\n        var datapoints = res.datapoints;\n        var length     = datapoints.length;\n        // remove the last few \"null\" values from the series because the last value is quite often null\n        // and would break current value in legend tables\n        for(var y=1; y < 5; y++) {\n          if(length > y && datapoints[length-y][0] === null) {\n            datapoints.pop();\n          } else {\n            break;\n          }\n        }\n        var length = datapoints.length;\n        var fill   = options.targets[x].fill;\n        if(fill != \"fill\") {\n          if(fill == \"zero\") { fill = 0; }\n          if(fill == \"gap\")  { fill = undefined; }\n          for(var y=0; y<length; y++) {\n            if(datapoints[y][0] === null) {\n              datapoints[y][0] = fill;\n            }\n          }\n        }\n        if(options.targets[x].factor && options.targets[x].factor != \"\") {\n          var factor = eval(options.targets[x].factor);\n          if(factor != NaN && factor != 1) {\n            for(var y=0; y<length; y++) {\n              if(datapoints[y][0] !== null) {\n                datapoints[y][0] *= factor;\n              }\n            }\n          }\n        }\n        data.data.push({\n          \"target\": alias,\n          \"datapoints\": datapoints\n        });\n      }\n    }\n    return(data);\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  /* convert list selection into regular expression\n   * in:  /^{a,b,c}$/\n   * out: /^(a|b|c)$/\n   */\n  _fixup_regex(value) {\n    if(value == undefined || value == null) {\n      return value;\n    }\n    var matches = value.match(/^\\/?\\^?\\{(.*)\\}\\$?\\/?$/);\n    if(!matches) { return(value); }\n    var values = matches[1].split(/,/);\n    for(var x = 0; x < values.length; x++) {\n      values[x] = values[x].replace(/\\//, '\\\\/');\n    }\n    return('/^('+values.join('|')+')$/');\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n  /* called from the dashboard templating engine to fill template variables\n   * parses simple statements into proper data requests\n   * query syntax: <type> [where <expr>]\n   * ex.: host\n   * ex.: service where host = localhost\n   * ex.: label where host = localhost and service = ping\n   */\n  metricFindQuery(query) {\n    /*var This = this;\n    var type;\n    var options = {};\n    var query = query_string.split(/\\s+/);\n    if(query[0]) {\n      type = query.shift().replace(/s$/, \"\");\n    }\n    // parse simple where statements\n    if(query[0] != undefined) {\n      if(query[0].toLowerCase() != \"where\") {\n        throw new Error(\"query syntax error, expecting WHERE\");\n      }\n      query.shift();\n\n      while(query.length >= 3) {\n        var t   = query.shift().toLowerCase();\n        var op  = query.shift().toLowerCase();\n        var val = query.shift();\n        if(op != \"=\") {\n          throw new Error(\"query syntax error, operator must be '='\");\n        }\n        options[t] = val;\n\n        if(query[0] != undefined) {\n          if(query[0].toLowerCase() == 'and') {\n            query.shift();\n          } else {\n            throw new Error(\"query syntax error, expecting AND\");\n          }\n        }\n      }\n\n      // still remaining filters?\n      if(query.length > 0) {\n        throw new Error(\"query syntax error\");\n      }\n    }\n    return(This.metricFindData(type, options, false));*/\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n\n  }\n\n  /* used from the query editor to get lists of objects of given type */\n  metricFindData(type, options, prependVariables) {\n    var This = this;\n    var mapper;\n    var url;\n    var data = options || {};\n    if(type == \"host\") {\n      url          = This.url + '/hosts';\n      mapper       = This.mapToTextValue;\n    }\n    else if(type == \"service\") {\n      url          = This.url + '/services';\n      data.host    = This._fixup_regex(This.templateSrv.replace(options.host));\n      //data.host_id = This.rawdata[options.refId]['host'].filter((cur) => (cur.text == data.host)).pop().value;\n      mapper       = This.mapToTextValue;\n      //if(!data.host) { data.host = '/.*/'; }\n    }\n    else if(type == \"metric\" || type == \"label\") {\n      url          = This.url + '/metrics';\n\n      if (options.mode == c.MODE_SYSTEM) {\n        data.host    = '';\n        data.service = '';\n      } else {\n        data.host    = This._fixup_regex(This.templateSrv.replace(options.host));\n        data.service = This._fixup_regex(This.templateSrv.replace(options.service));\n      }\n\n      data.objecttype = This._fixup_regex(This.templateSrv.replace(options.objecttype));\n      data.mode = options.mode;\n      mapper       = This.mapToTextValue;\n      //if(!data.host)    { data.host    = '/.*/'; }\n      //if(!data.service) { data.service = '/.*/'; }\n    } else if(type == \"timecut\") {\n      url          = This.url + '/timecuts';\n      mapper       = This.mapToTextValue;\n    } else if (type == \"hostgroup\" || type == \"servicegroup\" || type == \"serviceCatalog\") {\n      url = This.url + '/' + type;\n      mapper = This.mapToTextValue;\n    }\n\n    if(url == undefined) {\n      throw new Error(\"query syntax error, got no url, unknown type: \"+type);\n    }\n\n    var requestOptions = This._requestOptions({\n      url:     url,\n      data:    data,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    return This.backendSrv.datasourceRequest(requestOptions)\n      .then(mapper)\n      .then(function(data) {\n        /* prepend templating variables */\n        if(prependVariables) {\n          for(var x=0; x<This.templateSrv.variables.length; x++) {\n            data.unshift({ text:  '/^$'+This.templateSrv.variables[x].name+'$/',\n                           value: '/^$'+This.templateSrv.variables[x].name+'$/' });\n          }\n        }\n        if (type == 'metric') {\n          data.unshift({text: This.DEFAULT_METRIC,value: \"\"});\n        }\n        return(data);\n      });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  /*mapToTextValueHost(result) {\n    return _.map(result.data.hosts, (d, i) => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  mapToTextValueService(result) {\n    return _.map(result.data.services, (d, i) => {\n      return { text: (d.servicedesc || d.name), value: d.name };\n    });\n  }\n\n  mapToTextValuePerflabel(result) {\n    return _.map(result.data.labels, (d, i) => {\n      return { text: (d.label || d.name), value: (d.label || d.name) };\n    });\n  }*/\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n\n      // options.targets = _.filter(options.targets, target => {\n      //   if (target.mode == c.MODE_CP || target.mode == c.MODE_AVAIL) {\n      //     return target.host !== this.DEFAULT_HOST;\n      //   } else {\n      //     return true;\n      //   }\n      // });\n\n\n      options.targets = _.filter(options.targets, target => {\n        if (target.mode == c.MODE_CP) {\n          return target.service !== this.DEFAULT_SERVICE;\n        } else {\n          return true;\n        }\n      });\n\n\n    // options.targets = _.filter(options.targets, target => {\n    //  return target.resultFormat !== this.DEFAULT_RESULT_FORMAT;\n    //});\n    //options.targets = _.filter(options.targets, target => {\n    //  return target.metric !== this.DEFAULT_METRIC;\n    //});\n\n    var targets = _.map(options.targets, target => {\n      return {\n        host: this.templateSrv.replace(this.templateSrv.replace(target.host, options.scopedVars)),\n        service: this.templateSrv.replace(this.templateSrv.replace(target.service, options.scopedVars)),\n        hostgroup: this.templateSrv.replace(this.templateSrv.replace(target.hostgroup, options.scopedVars)),\n        servicegroup: this.templateSrv.replace(this.templateSrv.replace(target.servicegroup, options.scopedVars)),\n        serviceCatalog: this.templateSrv.replace(this.templateSrv.replace(target.serviceCatalog, options.scopedVars)),\n        metric: this.templateSrv.replace(this.templateSrv.replace(target.metric, options.scopedVars)),\n        alias: this.templateSrv.replace(this.templateSrv.replace(target.alias, options.scopedVars)),\n        groupby: this.templateSrv.replace(this.templateSrv.replace(target.groupby, options.scopedVars)),\n        timecut: this.templateSrv.replace(this.templateSrv.replace(target.timecut, options.scopedVars)),\n        resultformat: this.templateSrv.replace(this.templateSrv.replace(target.resultformat, options.scopedVars)),\n        objecttype: this.templateSrv.replace(this.templateSrv.replace(target.objecttype, options.scopedVars)),\n        extended_state: target.extended_state,\n        hardState: target.hardState,\n        mode: target.mode,\n        //fill: this.templateSrv.replace(this.templateSrv.replace(target.fill, options.scopedVars)),\n        //factor: this.templateSrv.replace(this.templateSrv.replace(target.factor, options.scopedVars)),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  _requestOptions(options) {\n    options = options || {};\n    options.headers = options.headers || {};\n    if(this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if(this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    return(options);\n  }\n}\n"]}